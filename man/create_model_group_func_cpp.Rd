% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model_creation.R
\name{create_model_group_func_cpp}
\alias{create_model_group_func_cpp}
\title{Create model function pointer cpp implementation}
\usage{
create_model_group_func_cpp(parTab, dat = NULL, PRIOR_FUNC = NULL,
  version = "model", convert_types = c(all = 0, infection = 1, vacc = 2, adj
  = 3, mod = 4, `NA` = 5), convert_strains = c(A = 1, B = 2, C = 3, D = 4, E =
  5), convert_groups = c(`1` = 1, `2` = 2, `3` = 3, `4` = 4, `5` = 5),
  individuals = c(1, 1, 1, 1, 1))
}
\arguments{
\item{parTab}{the full parameter table - see example csv file}

\item{dat}{if posterior function, need the matrix of data. First row is model times, and subsequent rows are trajectories (each row is trajectory of antibodies for one strain, grouped by exposure group)}

\item{PRIOR_FUNC}{optional pointer to prior calculating function that takes current parameter vector}

\item{version}{string of either "model" (for pure model function) or "posterior" (for posterior calculation)}

\item{convert_types}{optionally, a named vector converting strings of infection types to integers. The Cpp funciton needs these as integers, but the default arguments should be fine}

\item{convert_strains}{as for convert_types, but relating to the infection strain names}

\item{convert_groups}{if the groups are named, used to convert names to integers}

\item{individuals}{vector indicating how many individuals are in each group ie. relating to rows in the data matrix}
}
\value{
a function pointer for \code{\link{model_func_group_cpp}} or \code{\link{posterior_func_group_cpp}}
}
\description{
Creaters a function pointer for \code{\link{model_func_group_cpp}} to save passing multiple vectors constantly. This function will return the same thing, but requires only a vector of (unnamed) parameters and a vector of times providing the parameter vector is the same order as in the given parTab argument. This function can also be used to create a pointer to the same model function, but solving a likelihood function
}

